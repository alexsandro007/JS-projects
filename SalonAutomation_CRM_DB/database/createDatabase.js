const sqlite3 = require('sqlite3').verbose();

// Название базы данных
const dbName = 'cosmetology_salon.db';

// Подключение к базе данных
const db = new sqlite3.Database(dbName, (err) => {
     if (err) {
          console.error('Ошибка подключения к базе данных:', err.message);
     } else {
          console.log('Подключение к базе данных успешно!');
     }

     // Включение внешних ключей
     db.run("PRAGMA foreign_keys = ON;", (err) => {
          if (err) {
              console.error("Ошибка при включении внешних ключей:", err.message);
          }
      });
      
});

// Функция для создания таблиц и заполнения данными
db.serialize(() => {
     // Удаление существующих таблиц
     const tables = [
          "Категории_услуг", "Услуги", "Сотрудники", "Клиенты",
          "Записи_на_услуги", "Акции_и_скидки", "Общая_статистика_по_услугам", "Анализ_эффективности_акций"
     ];

     tables.forEach((table) => {
          db.run(`DROP TABLE IF EXISTS ${table}`, (err) => {
               if (err) {
                    console.error(`Ошибка при удалении таблицы ${table}:`, err.message);
               } else {
                    console.log(`Таблица ${table} удалена.`);
               }
          });
     });

     // Создание таблиц
     db.run(`
          CREATE TABLE Категории_услуг (
              ID_категории INTEGER PRIMARY KEY AUTOINCREMENT,
              Название_категории TEXT NOT NULL UNIQUE
          )
     `, (err) => {
          if (err) console.error('Ошибка при создании таблицы Категории_услуг:', err.message);
          else console.log('Таблица Категории_услуг создана');
     });
  
     db.run(`
          CREATE TABLE Услуги (
              ID_услуги INTEGER PRIMARY KEY AUTOINCREMENT,
              Название_услуги TEXT NOT NULL,
              ID_категории INTEGER NOT NULL,
              Цена REAL NOT NULL CHECK(Цена >= 0),
              Описание_услуги TEXT,
              FOREIGN KEY(ID_категории) REFERENCES Категории_услуг(ID_категории) ON DELETE CASCADE
          )
     `, (err) => {
          if (err) console.error('Ошибка при создании таблицы Услуги:', err.message);
          else console.log('Таблица Услуги создана');
     });
  
     db.run(`
          CREATE TABLE Сотрудники (
              ID_сотрудника INTEGER PRIMARY KEY AUTOINCREMENT,
              ФИО TEXT NOT NULL,
              Должность TEXT NOT NULL,
              Контактный_телефон TEXT UNIQUE,
              Дата_начала_работы TEXT NOT NULL
          )
     `, (err) => {
          if (err) console.error('Ошибка при создании таблицы Сотрудники:', err.message);
          else console.log('Таблица Сотрудники создана');
     });
  
     db.run(`
          CREATE TABLE Клиенты (
              ID_клиента INTEGER PRIMARY KEY AUTOINCREMENT,
              ФИО TEXT NOT NULL,
              Контактный_телефон TEXT UNIQUE,
              Дата_первого_обращения TEXT NOT NULL
          )
     `, (err) => {
          if (err) console.error('Ошибка при создании таблицы Клиенты:', err.message);
          else console.log('Таблица Клиенты создана');
     });

     db.run(`
          CREATE TABLE Записи_на_услуги (
              ID_записи INTEGER PRIMARY KEY AUTOINCREMENT,
              Дата_записи TEXT NOT NULL,
              ID_услуги INTEGER NOT NULL,
              ID_сотрудника INTEGER NOT NULL,
              Стоимость REAL NOT NULL CHECK(Стоимость >= 0),
              ID_клиента INTEGER NOT NULL,
              FOREIGN KEY(ID_услуги) REFERENCES Услуги(ID_услуги) ON DELETE CASCADE,
              FOREIGN KEY(ID_сотрудника) REFERENCES Сотрудники(ID_сотрудника) ON DELETE CASCADE,
              FOREIGN KEY(ID_клиента) REFERENCES Клиенты(ID_клиента) ON DELETE CASCADE
          )
     `, (err) => {
          if (err) console.error('Ошибка при создании таблицы Записи_на_услуги:', err.message);
          else console.log('Таблица Записи_на_услуги создана');
     });

     db.run(`
          CREATE TABLE Акции_и_скидки (
              ID_акции INTEGER PRIMARY KEY AUTOINCREMENT,
              Название_акции TEXT NOT NULL UNIQUE,
              Описание_акции TEXT,
              Скидка_процент INTEGER CHECK(Скидка_процент BETWEEN 0 AND 100),
              Дата_начала TEXT NOT NULL,
              Дата_окончания TEXT NOT NULL,
              ID_услуги INTEGER NOT NULL,
              CHECK (Дата_окончания >= Дата_начала),
              FOREIGN KEY(ID_услуги) REFERENCES Услуги(ID_услуги) ON DELETE CASCADE
          )
     `, (err) => {
          if (err) console.error('Ошибка при создании таблицы Акции_и_скидки:', err.message);
          else console.log('Таблица Акции_и_скидки создана');
     });

     db.run(`
          CREATE TABLE Общая_статистика_по_услугам (
              ID_статистики INTEGER PRIMARY KEY AUTOINCREMENT,
              Категория_услуг TEXT NOT NULL,
              Количество_заказов INTEGER NOT NULL CHECK(Количество_заказов >= 0),
              Общий_доход REAL NOT NULL CHECK(Общий_доход >= 0),
              Количество_клиентов INTEGER NOT NULL CHECK(Количество_клиентов >= 0),
              Новые_клиенты INTEGER NOT NULL CHECK(Новые_клиенты >= 0),
              ID_записи INTEGER NOT NULL,
              FOREIGN KEY(ID_записи) REFERENCES Записи_на_услуги(ID_записи) ON DELETE CASCADE
          )
     `, (err) => {
          if (err) console.error('Ошибка при создании таблицы Общая_статистика_по_услугам:', err.message);
          else console.log('Таблица Общая_статистика_по_услугам создана');
     });

     db.run(`
          CREATE TABLE Анализ_эффективности_акций (
              ID_анализа INTEGER PRIMARY KEY AUTOINCREMENT,
              Название_акции TEXT NOT NULL,
              Услуга TEXT NOT NULL,
              Дата_начала TEXT NOT NULL,
              Дата_окончания TEXT NOT NULL,
              Количество_заказов INTEGER NOT NULL CHECK(Количество_заказов >= 0),
              Доход_от_акции REAL NOT NULL CHECK(Доход_от_акции >= 0),
              Скидка REAL CHECK(Скидка >= 0),
              Количество_новых_клиентов INTEGER NOT NULL CHECK(Количество_новых_клиентов >= 0),
              ID_акции INTEGER NOT NULL,
              ID_услуги INTEGER NOT NULL,
              CHECK (Дата_окончания >= Дата_начала),
              FOREIGN KEY(ID_акции) REFERENCES Акции_и_скидки(ID_акции) ON DELETE CASCADE,
              FOREIGN KEY(ID_услуги) REFERENCES Услуги(ID_услуги) ON DELETE CASCADE
          )
     `, (err) => {
          if (err) console.error('Ошибка при создании таблицы Анализ_эффективности_акций:', err.message);
          else console.log('Таблица Анализ_эффективности_акций создана');
     });
      
     // Вставка данных в таблицы
     db.run(`
          INSERT INTO Категории_услуг (ID_категории, Название_категории)
          VALUES 
          (1, 'Маникюр'),
          (2, 'Стрижка'),
          (3, 'Массаж'),
          (4, 'Уход за кожей лица')
     `, (err) => {
          if (err) console.error('Ошибка при вставке данных в Категории_услуг:', err.message);
     });

     db.run(`
          INSERT INTO Услуги (ID_услуги, Название_услуги, ID_категории, Цена, Описание_услуги)
          VALUES 
          (1, 'Маникюр классический', 1, 150, 'Стандартный маникюр'),
          (2, 'Маникюр с покрытием', 1, 200, 'Маникюр с гель-лаком'),
          (3, 'Стрижка мужская', 2, 120, 'Классическая стрижка'),
          (4, 'Стрижка женская', 2, 150, 'Классическая стрижка'),
          (5, 'Массаж лица', 3, 200, 'Релаксирующий массаж лица'),
          (6, 'Массаж спины', 3, 250, 'Расслабляющий массаж спины'),
          (7, 'Уход за кожей лица', 4, 300, 'Комплексный уход за кожей'),
          (8, 'Пилинг лица', 4, 350, 'Глубокий пилинг для лица')
     `, (err) => {
          if (err) console.error('Ошибка при вставке данных в Услуги:', err.message);
     });

     db.run(`
          INSERT INTO Сотрудники (ID_сотрудника, ФИО, Должность, Контактный_телефон, Дата_начала_работы)
          VALUES 
          (1, 'Иванова Ирина Сергеевна', 'Маникюрист', '+375 29 645 12 34', '2023-01-01'),
          (2, 'Петрова Мария Владимировна', 'Парикмахер', '+375 44 785 67 89', '2022-06-15'),
          (3, 'Сидорова Светлана Николаевна', 'Массажист', '+375 33 543 21 78', '2023-05-10'),
          (4, 'Кузнецова Анна Алексеевна', 'Косметолог', '+375 25 987 45 61', '2022-11-20')
     `, (err) => {
          if (err) console.error('Ошибка при вставке данных в Сотрудники:', err.message);
     });

     db.run(`
          INSERT INTO Клиенты (ID_клиента, ФИО, Контактный_телефон, Дата_первого_обращения)
          VALUES 
          (101, 'Смирнов Сергей Александрович', '+375 29 741 62 58', '2023-07-10'),
          (102, 'Белова Елена Владимировна', '+375 33 893 47 29', '2023-08-15'),
          (103, 'Федорова Наталья Павловна', '+375 44 562 18 73', '2023-09-20'),
          (104, 'Михайлова Ирина Викторовна', '+375 25 234 89 45', '2023-10-05')
     `, (err) => {
          if (err) console.error('Ошибка при вставке данных в Клиенты:', err.message);
     });

     db.run(`
          INSERT INTO Записи_на_услуги (ID_записи, Дата_записи, ID_услуги, ID_сотрудника, Стоимость, ID_клиента)
          VALUES 
          (1, '2024-04-01', 1, 1, 150, 101),
          (2, '2024-04-02', 3, 2, 120, 102),
          (3, '2024-04-03', 5, 3, 200, 103),
          (4, '2024-04-04', 7, 4, 300, 104)
     `, (err) => {
          if (err) console.error('Ошибка при вставке данных в Записи_на_услуги:', err.message);
     });

     db.run(`
          INSERT INTO Акции_и_скидки (ID_акции, Название_акции, Описание_акции, Скидка_процент, Дата_начала, Дата_окончания, ID_услуги)
          VALUES 
          (1, 'Скидка на маникюр', 'Скидка 10% на маникюр', 10, '2024-04-01', '2024-04-30', 1),
          (2, 'Скидка на стрижку', 'Скидка 15% на стрижки', 15, '2024-04-05', '2024-04-20', 3),
          (3, 'Скидка на массаж', 'Скидка 20% на массаж', 20, '2024-04-10', '2024-04-15', 5),
          (4, 'Скидка на уход за лицом', 'Скидка 25% на уход за лицом', 25, '2024-04-05', '2024-04-30', 7)
     `, (err) => {
          if (err) console.error('Ошибка при вставке данных в Акции_и_скидки:', err.message);
     });

     db.run(`
          INSERT INTO Общая_статистика_по_услугам (ID_статистики, Категория_услуг, Количество_заказов, Общий_доход, Количество_клиентов, Новые_клиенты, ID_записи)
          VALUES 
          (1, 'Маникюр', 100, 15000, 80, 40, 1),
          (2, 'Стрижка', 120, 14400, 90, 60, 2),
          (3, 'Массаж', 80, 16000, 70, 50, 3),
          (4, 'Уход за кожей лица', 60, 18000, 50, 30, 4)
     `, (err) => {
          if (err) console.error('Ошибка при вставке данных в Общая_статистика_по_услугам:', err.message);
     });

     db.run(`
          INSERT INTO Анализ_эффективности_акций (ID_анализа, Название_акции, Услуга, Дата_начала, Дата_окончания, Количество_заказов, Доход_от_акции, Скидка, Количество_новых_клиентов, ID_акции, ID_услуги)
          VALUES 
          (1, 'Скидка на маникюр', 'Маникюр классический', '2024-04-01', '2024-04-30', 50, 7500, 10, 30, 1, 1),
          (2, 'Скидка на стрижку', 'Стрижка мужская', '2024-04-05', '2024-04-20', 60, 7200, 15, 40, 2, 3),
          (3, 'Скидка на массаж', 'Массаж лица', '2024-04-10', '2024-04-15', 40, 8000, 20, 30, 3, 5),
          (4, 'Скидка на уход за лицом', 'Уход за кожей лица', '2024-04-05', '2024-04-30', 30, 9000, 25, 20, 4, 7)
     `, (err) => {
          if (err) console.error('Ошибка при вставке данных в Анализ_эффективности_акций:', err.message);
     });
});

// Закрытие базы данных
db.close((err) => {
     if (err) {
          console.error('Ошибка при закрытии базы данных:', err.message);
     } else {
          console.log('База данных закрыта');
     }
});
